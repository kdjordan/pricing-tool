function consolidateDialCodes(group: StandardizedData[]): StandardizedData {
    const { destName, rate } = group[0];
    const dialCodes = new Set(group.map(row => row.dialCode));
    return {
      destName,
      rate,
      dialCode: Array.from(dialCodes).join(','),
      // include other properties if needed
    };
  }

  async function openDB(name: string, version: number, options: any): Promise<IDBDatabase> {
    return new Promise((resolve, reject) => {
      const request = indexedDB.open(name, version);
      request.onupgradeneeded = (event) => {
        const db = (event.target as IDBOpenDBRequest).result;
        if (options.upgrade) {
          options.upgrade(db);
        }
      };
      request.onsuccess = (event) => {
        resolve((event.target as IDBOpenDBRequest).result);
      };
      request.onerror = (event) => {
        reject((event.target as IDBOpenDBRequest).error);
      };
    });
  }

  function batchProcessAndStoreData(data: StandardizedData[], store: IDBObjectStore) {
    let currentGroup: StandardizedData[] = [];
    let currentDestName = data[0].destName;
    let currentRate = data[0].rate;

    data.forEach((row) => {
      if (row.destName === currentDestName && row.rate === currentRate) {
        currentGroup.push(row);
      } else {
        // Consolidate and add the current group to the store
        const consolidatedRow = consolidateDialCodes(currentGroup);
        store.add(consolidatedRow);

        // Reset the group
        currentGroup = [row];
        currentDestName = row.destName;
        currentRate = row.rate;
      }
    });

    // Consolidate and add the last group to the store
    const consolidatedRow = consolidateDialCodes(currentGroup);
    console.log('***', consolidatedRow);
    store.add(consolidatedRow);
  }

  async function storeInIndexedDB(data: StandardizedData[], dbName: string, fileName: string, componentName: string): Promise<void> {
    try {
      const db = await openDB(dbName, DBstore.globalDBVersion + 1, {
        upgrade(db) {
          console.log('Upgrade needed for IndexedDB');
          DBstore.setGlobalFileIsUploading(true);

          if (!db.objectStoreNames.contains(fileName)) {
            db.createObjectStore(fileName, {
              keyPath: 'id',
              autoIncrement: true,
            });
          }
        },
      });

      const transaction = db.transaction(fileName, 'readwrite');
      const store = transaction.objectStore(fileName);

      // Sort the data by destName and rate
      data.sort((a, b) => {
        if (a.destName < b.destName) return -1;
        if (a.destName > b.destName) return 1;
        if (a.rate < b.rate) return -1;
        if (a.rate > b.rate) return 1;
        return 0;
      });
      console.log('got sorted data', data)

      // Batch process and store the data
      batchProcessAndStoreData(data, store);

      transaction.oncomplete = () => {
        DBstore.addFileUploaded(componentName, dbName, fileName);
        console.log('Data stored successfully in IndexedDB', fileName, dbName, componentName);
        DBstore.setGlobalFileIsUploading(false);
        DBstore.setComponentFileIsUploading(undefined);
        db.close();
      };

      transaction.onerror = () => {
        DBstore.setGlobalFileIsUploading(false);
        DBstore.setComponentFileIsUploading(undefined);
        console.error('Transaction error:', transaction.error);
      };
    } catch (error) {
      console.error('Error opening IndexedDB:', error);
    }
  }



// Compute available roles for each column
	const availableRoles = (currentIndex: number) => {
		const usedRoles = new Set(
			columnRoles.value.filter(
				(role) => role !== '' && role !== undefined
			)
		);
		// const allRoles = ['Destination', 'Code', 'Rate']; // Example roles; replace with your actual roles
		// return allRoles.filter(
		// 	(role) =>
		// 		!usedRoles.has(role) ||
		// 		role === columnRoles.value[currentIndex]
		// );
		return props.columnRoleOptions.filter(
    (role) =>
      !usedRoles.has(role.value) ||
      role.value === columnRoles.value[currentIndex]
  );
	};

